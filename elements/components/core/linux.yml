id: linux
version: 6.3.8
release: 1
about: |
  Linux kernel, modules and headers
sources:
  - https://www.kernel.org/pub/linux/kernel/v6.x/linux-%{version}.tar.xz

environ:
  - ARCH=%{arch}
  - KBUILD_BUILD_TIMESTAMP=Fri Nov 12 12:00:00 UTC 2011
  - KBUILD_BUILD_USER=rlxos

script: |
  has() {
    state="$(scripts/config --keep-case -s "${1}")"
    case "${state}" in
      undef|n)
        return 1
      ;;
      y|m)
        return 0
      ;;
      *)
        echo "Wrong status for ${1}: ${state}" 1>&2
        exit 1
      ;;
    esac
  }
  remove() {
    scripts/config --keep-case -d "${1}"
  }
  module() {
    echo "${1}" >>expected-configs
    has "${1}" || scripts/config --keep-case -m "${1}"
  }
  enable() {
    echo "${1}" >>expected-configs
    scripts/config --keep-case -e "${1}"
  }
  value_str() {
    scripts/config --keep-case --set-str "${1}" "${2}"
  }
  value() {
    scripts/config --keep-case --set-val "${1}" "${2}"
  }


  make defconfig

  # Live boot
  module SQUASHFS
  enable SQUASHFS_ZLIB
  module OVERLAY_FS
  
  make -j1 olddefconfig

  missing_configs=0
  for config in $(cat expected-configs); do
    if ! has "${config}"; then
      echo "Missing ${config}" 1>&2
      missing_configs=1
    fi
  done

  [ ${missing_configs} = 0 ]


  make ${MAKEFLAGS}
  
  make -j1 INSTALL_MOD_PATH='%{install-root}/%{prefix}' modules_install
  release=$(make -s kernelrelease)
  image_name=$(make -s image_name)

  install -Dm644 -t %{install-root}/%{libdir}/modules/${release} ${image_name}
  install -Dm644 -t %{install-root}/%{libdir}/modules/${release} System.map
  install -Dm644 .config %{install-root}/%{libdir}/modules/${release}/config

  find %{install-root}/%{libdir}/modules/$release -type f -name '*.ko' | xargs -P 4 -n 2 -r xz;
  targetdir=%{install-root}/%{prefix}/src/linux-$release

  rm %{install-root}/%{libdir}/modules/$release/{source,build}

  to_copy=(
    Makefile
    Module.symvers
    .config
    "arch/x86/include"
    "arch/x86/Makefile"
    scripts
    include
  )

  if [ "$(scripts/config -s OBJTOOL)" = y ] ;then
    to_copy+=(tools/objtool/objtool)
  fi

  for file in ${to_copy[@]} ; do
    targetfile=${targetdir}/$file
    dir=$(dirname $targetfile)
    [ -d ${dir} ] || install -d $dir
    cp -aT $file $targetfile
  done

  ln -sr ${targetdir} %{install-root}%{libdir}/modules/$release/source
  ln -sr ${targetdir} %{install-root}%{libdir}/modules/$release/build

integration: |
  cd '%{libdir}/modules'
  for version in * ; do
    depmod -b %{prefix} -a $version;
  done

build-time:
  - components/core/coreutils.yml
  - components/core/kmod.yml
  - components/core/bc.yml
  - components/core/cpio.yml
  - components/core/xz.yml
  - components/core/xmlto.yml
  - components/core/tar.yml
  - components/core/libelf.yml
  - components/core/zstd.yml
  - components/core/findutils.yml
  - components/core/flex.yml
  - components/core/bison.yml
  - components/core/lzo.yml
