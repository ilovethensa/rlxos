merge: [version.yml]
no-strip: true

variables:
  installer-volume-id: RLXOS
  include-root: /sysroot
  root-password: rlxos
  cmdline: live root=LABEL=RLXOS
  force-rebuild: true

build-time:
  - components/core.yml
  - components/e2fsprogs.yml
  - components/linux.yml
  - components/mkinitramfs.yml
  - components/mtools.yml
  - components/grub.yml
  - components/systemd.yml
  - components/cryptsetup.yml
  - components/squashfs-tools.yml
  - components/syslinux.yml

script: |
  mkdir -p ISO/{boot/grub/{fonts,x86_64-efi},efi/boot,isolinux}
  kerver=$(ls /lib/modules | head -n1)

  for file in chain.c32 isolinux.bin ldlinux.c32 libutil.c32 reboot.c32 vesamenu.c32 libcom32.c32 poweroff.c32 ; do
    cp %{datadir}/syslinux/$file ISO/isolinux/
  done

  install -vDm0644 /dev/stdin ISO/isolinux/isolinux.cfg << EOF
  DEFAULT RLXOS GNU/Linux
  LABEL RLXOS GNU/Linux
    KERNEL /boot/vmlinuz-${kerver}
    APPEND initrd=/boot/initramfs-${kerver}.img %{cmdline}
  EOF

  install -vDm0644 /dev/stdin ISO/boot/grub/grub.cfg << EOF
  set defaul="RLXOS GNU/Linux"
  set timeout=10

  insmod all_video
  if loadfont /boot/grub/fonts/unicode.pf2; then
    set gfxmode=800x600
    insmod efi_gop
    insmod efi_uga
    insmod video_bochs
    insmod video_cirrus
    insmod gfxterm
    insmod png
    terminal_output gfxterm
  fi

  menuentry "RLXOS GNU/Linux" {
    linux /boot/vmlinuz-${kerver} %{cmdline}
    initrd /boot/initramfs-${kerver}.img
  }

  EOF

  cp %{datadir}/grub/unicode.pf2 ISO/boot/grub/fonts/
  echo "set prefix=/boot/grub" > ISO/boot/grub-early.cfg
  cp -a %{libdir}/grub/x86_64-efi/*.{mod,lst} ISO/boot/grub/x86_64-efi

  grub-mkimage -c ISO/boot/grub-early.cfg -o ISO/efi/boot/bootx64.efi -Ox86_64-efi -p "" iso9660 normal search search_fs_file
  dd if=/dev/zero of=ISO/boot/efiboot.img count=4096
  mkdosfs -n RLXOS-UEFI ISO/boot/efiboot.img
  mkdir -p ISO/boot/efiboot
  mount ISO/boot/efiboot.img ISO/boot/efiboot
  mkdir -p ISO/boot/efiboot/EFI/boot
  cp ISO/efi/boot/bootx64.efi ISO/boot/efiboot/EFI/boot
  umount ISO/boot/efiboot
  rm -fr ISO/boot/efiboot

  cp -r /sysroot/%{version}/sysroot.img ISO/
  mv /sysroot/*-live-config ISO/live-config.img

  
  cp /lib/modules/${kerver}/bzImage ISO/boot/vmlinuz-${kerver}
  
  mkinitramfs -u -k=${kerver} --no-plymouth -o=$(pwd)/ISO/boot/initramfs-${kerver}.img

  mkdir -p %{install-root}/
  xorriso -as mkisofs \
    -isohybrid-mbr %{datadir}/syslinux/isohdpfx.bin \
    -c isolinux/boot.cat \
    -b isolinux/isolinux.bin \
       -no-emul-boot \
       -boot-load-size 4 \
       -boot-info-table \
    -eltorito-alt-boot \
    -e boot/efiboot.img \
       -no-emul-boot \
       -isohybrid-gpt-basdat \
       -volid %{installer-volume-id} \
    -o %{install-root}/rlxos-%{version}-%{id}.iso ISO/

  cd %{install-root}
  sha256sum rlxos-%{version}-%{id}.iso >rlxos-%{version}-%{id}.iso.sha265sum
