#!/bin/bash
#
# init.in
# Copyright (C) 2023 rlxos

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# init.in: initramfs init script
#

ROOT=
ROOTFLAGS=
INIT="/usr/bin/init"
UDEVD="/lib/systemd/systemd-udevd"
DELAY=5

ISO_DIR='/run/ISO'
LIVE_CONFIG='live-config.img'
SYSTEM=


dbg() { [ -n "$DEBUG"] && echo "DEBUG: $@"; }
rescue() { echo "RESCUE: $@"; sh; }

dbg "Mounting Pseudo Filesystems..."

mount -t proc none /proc -o nosuid,noexec,nodev
mount -t sysfs none /sys -o nosuid,noexec,nodev
mount -t devtmpfs none /dev -o mode=0755,nosuid
mount -t tmpfs none /run -o nosuid,nodev,mode=0755

for arg in $(cat /proc/cmdline); do
    case "${arg}" in
        root=*)         ROOT="${arg#*=}"        ;;
        rootflags=*)    ROOTFLAGS="${arg#*=}"   ;;
        rd.image=*)     SYSTEM="${arg#*=}"      ;;
        rd.overlay=*)   OVERLAY="${arg#*=}"     ;;
        init=*)         INIT="${arg#*=}"        ;;
        delay=*)        DELAY="${arg#*=}"       ;;
        live)           LIVE=1                  ;;
        debug)          DEBUG=1                 ;;
    esac 
done

dbg "Loading Kernel Modules"
if [[ -f /etc/modules.d ]] ; then
    for f in /etc/modules.d/*.conf ; do
        while IFS= read -r module args; do
        dbg "Loading Module $module $args"
            modprobe $module $args 
        done < "$f"
    done
fi

dbg "Loading extra modules"
for module in loop cdrom sr_mod isofs overlay ; do
    modprobe $module
done

dbg "Creating Device nodes"
$UDEVD --daemon --resolve-names=never
udevadm trigger --action=add --type=subsystems
udevadm trigger --action=add --type=devices
udevadm trigger --action=change --type=devices
udevadm settle

_count=0

while [[ $_count -lt 10 ]] ; do
    dbg "Resolving root ${ROOT}"
    RESOLVED_ROOT=$(findfs ${ROOT})
    if [[ -n $RESOLVED_ROOT ]] && [[ -e ${RESOLVED_ROOT} ]] ; then
        dbg "Resolved root filesystem ${RESOLVED_ROOT}"
        ROOT=${RESOLVED_ROOT}
        break
    fi
    sleep $DELAY
    _count=$((_count+1))
done


if [[ -z ${RESOLVED_ROOT} ]] || [[ ! -e ${RESOLVED_ROOT} ]] ; then
    echo "ERROR: failed to find ${ROOT} ${RESOLVED_ROOT} root filesystem"
    rescue
fi

SYSROOT='/sysroot'
mkdir -p ${SYSROOT}

if [[ -n "${LIVE}" ]] ; then
    dbg "Mounting System in Live Mode"
    ISO_DIR='/run/iso'
    LIVE_DIR='/run/live'

    mkdir -p ${LIVE_DIR}/rw ${LIVE_DIR}/ro-usr ${LIVE_DIR}/ro ${LIVE_DIR}/work

    mkdir -p "${ISO_DIR}"
    dbg "Mounting ISO image"
    mount -o ro "${ROOT}" "${ISO_DIR}" || rescue "failed to mount ${ROOT} ${ISO_DIR}"

    SYSTEM=${ISO_DIR}/$(readlink ${ISO_DIR}/usr.squashfs)

    dbg "Mounting System Image"
    mount ${SYSTEM} ${LIVE_DIR}/ro-usr || rescue "failed to system image ${SYSTEM} ${LIVE_DIR}/ro-usr"

    dbg "Setting up Live Configuration"
    mount ${ISO_DIR}/live-config.img ${LIVE_DIR}/ro || rescue "failed to live image live-config.img ${LIVE_DIR}/ro"

    dbg "Setting up overlay configuration"
    mount -t overlay overlay -o lowerdir=${LIVE_DIR}/ro:${LIVE_DIR}/ro-usr,upperdir=${LIVE_DIR}/rw,workdir=${LIVE_DIR}/work ${SYSROOT} || rescue "failed to setup overlay configuration lowerdir=${LIVE_DIR}/ro:${LIVE_DIR}/ro-usr,upperdir=${LIVE_DIR}/rw,workdir=${LIVE_DIR}/work ${SYSROOT}"

    (cd ${SYSROOT}; ln -sv . usr)

else
    dbg "Mounting Root filesystem ${ROOT} ${SYSROOT}"
    mount -o rw ${ROOT} ${SYSROOT} || rescue "failed to mount ${ROOT} ${SYSROOT}"

    [[ ! -d ${SYSROOT}/usr ]] && mkdir -p ${SYSROOT}/usr

    RESOLVED_SYSTEM=$(findfs ${SYSTEM})
    if [[ -z ${RESOLVED_SYSTEM} ]] ; then
        SYSTEM="${SYSROOT}/rlxos/system/${SYSTEM}"
    else
        SYSTEM=${RESOLVED_SYSTEM}
    fi

    dbg "Mounting System Image ${SYSTEM}"
    mount -o ro ${SYSTEM} ${SYSROOT}/usr || rescue "failed to mount ${SYSTEM} on ${SYSROOT}/usr"
fi

# TODO: Needed?
killall -w ${UDEVD}


mkdir -p ${SYSROOT}/dev ${SYSROOT}/proc ${SYSROOT}/sys ${SYSROOT}/run
mount --move /proc ${SYSROOT}/proc
mount --move /sys ${SYSROOT}/sys
mount --move /dev ${SYSROOT}/dev
mount --move /run ${SYSROOT}/run

dbg "Switching root"
exec switch_root ${SYSROOT} ${INIT}