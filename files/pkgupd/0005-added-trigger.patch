From 1149dcc58766c89698415285fba9554d41bbc85d Mon Sep 17 00:00:00 2001
From: itsmanjeet <itsmanjeet1998@gmail.com>
Date: Tue, 5 Oct 2021 22:35:36 +0530
Subject: [PATCH] added trigger

---
 libpkgupd/archive.cc   | 17 ++++++++
 libpkgupd/db.hh        |  3 ++
 libpkgupd/installer.cc | 10 +++++
 libpkgupd/pkginfo.hh   | 95 ++++++++++++++++++++++++++++++++++++++++++
 libpkgupd/recipe.cc    | 17 +-------
 libpkgupd/recipe.hh    | 49 +---------------------
 libpkgupd/sysdb.cc     | 32 ++++++++++++++
 libpkgupd/sysdb.hh     |  2 +
 libpkgupd/triggerer.cc | 22 ++++++++++
 libpkgupd/triggerer.hh |  3 ++
 pkgupd/PKGUPD.cc       | 45 ++++++++++++++++++++
 pkgupd/PKGUPD.hh       |  3 +-
 12 files changed, 235 insertions(+), 63 deletions(-)

diff --git a/libpkgupd/archive.cc b/libpkgupd/archive.cc
index 63192d8..5f24901 100644
--- a/libpkgupd/archive.cc
+++ b/libpkgupd/archive.cc
@@ -11,6 +11,9 @@ archive::package::package(YAML::Node const &data, std::string const &file) {
     READ_VALUE(std::string, version);
     READ_VALUE(std::string, about);
     READ_LIST(std::string, depends);
+
+    READ_OBJECT_LIST(pkginfo::user, users);
+    READ_OBJECT_LIST(pkginfo::group, groups);
 }
 
 std::tuple<int, std::string> archive::getdata(std::string const &filepath) {
@@ -90,6 +93,20 @@ bool archive::compress(std::string const &srcdir, std::shared_ptr<pkginfo> const
             fileptr << " - " << i << "\n";
     }
 
+    if (info->users().size()) {
+        fileptr << "users: " << std::endl;
+        for (auto const &i : info->users()) {
+            i->print(fileptr);
+        }
+    }
+
+    if (info->groups().size()) {
+        fileptr << "groups: " << std::endl;
+        for (auto const &i : info->groups()) {
+            i->print(fileptr);
+        }
+    }
+
     fileptr.close();
 
     std::string command = _archive_tool;
diff --git a/libpkgupd/db.hh b/libpkgupd/db.hh
index 95f21de..b1549d1 100644
--- a/libpkgupd/db.hh
+++ b/libpkgupd/db.hh
@@ -17,6 +17,9 @@ class db : public object {
     GET_METHOD(std::string, data_dir);
 
     virtual std::shared_ptr<pkginfo> operator[](std::string const &pkgid) = 0;
+    virtual std::vector<std::shared_ptr<pkginfo>> all() {
+        throw std::runtime_error("INTERNAL ERROR: not yet implemented for " + std::string(typeid(*this).name()));
+    };
 };
 }  // namespace rlxos::libpkgupd
 
diff --git a/libpkgupd/installer.cc b/libpkgupd/installer.cc
index 0c2c201..30e2357 100644
--- a/libpkgupd/installer.cc
+++ b/libpkgupd/installer.cc
@@ -77,6 +77,16 @@ bool installer::_install(std::vector<std::string> const &pkgs,
         }
     }
 
+    if (skip_triggers) {
+        INFO("skipped creating users account")
+    } else {
+        auto triggerer_ = triggerer();
+        if (!triggerer_.trigger(pkginfo_list)) {
+            _error = triggerer_.error();
+            return false;
+        }
+    }
+
     return true;
 }
 bool installer::install(std::vector<std::string> const &pkgs,
diff --git a/libpkgupd/pkginfo.hh b/libpkgupd/pkginfo.hh
index 76e6736..a1f1764 100644
--- a/libpkgupd/pkginfo.hh
+++ b/libpkgupd/pkginfo.hh
@@ -1,15 +1,110 @@
 #ifndef _LIBPKGUPD_PACKAGEINFO_HH_
 #define _LIBPKGUPD_PACKAGEINFO_HH_
 
+#include <grp.h>
+#include <pwd.h>
+#include <yaml-cpp/yaml.h>
+
+#include <ostream>
+
 #include "defines.hh"
+#include "exec.hh"
 
 namespace rlxos::libpkgupd {
 class pkginfo {
+   public:
+    class user {
+       private:
+        unsigned int _id;
+        std::string _name, _about, _dir, _shell, _group;
+
+       public:
+        user(unsigned int id,
+             std::string const &name,
+             std::string const &about,
+             std::string const &dir,
+             std::string const &shell,
+             std::string const &group)
+            : _id(id),
+              _name(name),
+              _about(about),
+              _dir(dir),
+              _shell(shell),
+              _group(group) {
+        }
+
+        GET_METHOD(std::string, name);
+
+        user(YAML::Node const &data, std::string const &file) {
+            READ_VALUE(unsigned int, id);
+            READ_VALUE(std::string, name);
+            READ_VALUE(std::string, about);
+            READ_VALUE(std::string, group);
+            READ_VALUE(std::string, dir);
+            READ_VALUE(std::string, shell);
+        }
+
+        bool exists() const {
+            return getpwnam(_name.c_str()) != nullptr;
+        }
+
+        bool create() const {
+            return exec().execute("useradd -c '" + _about + "' -d " + _dir + " -u " + std::to_string(_id) + " -g " + _group + " -s " + _shell + " " + _name) == 0;
+        }
+
+        void print(std::ostream &os) const {
+            os << " - id: " << _id << "\n"
+               << "   name: " << _name << "\n"
+               << "   about: " << _about << "\n"
+               << "   dir: " << _dir << "\n"
+               << "   shell: " << _shell << std::endl;
+        }
+    };
+
+    class group {
+       private:
+        unsigned int _id;
+        std::string _name;
+
+       public:
+        group(unsigned int id,
+              std::string const &name)
+            : _id(id),
+              _name(name) {}
+
+        group(YAML::Node const &data, std::string const &file) {
+            READ_VALUE(unsigned int, id);
+            READ_VALUE(std::string, name);
+        }
+
+        GET_METHOD(std::string, name);
+
+        bool exists() const {
+            return getgrnam(_name.c_str()) != nullptr;
+        }
+
+        bool create() const {
+            return exec().execute("groupadd -g " + std::to_string(_id) + " " + _name) == 0;
+        }
+
+        void print(std::ostream &os) const {
+            os << " - id: " << _id << "\n"
+               << "   name: " << _name << std::endl;
+        }
+    };
+
+   protected:
+    std::vector<std::shared_ptr<pkginfo::user>> _users;
+    std::vector<std::shared_ptr<pkginfo::group>> _groups;
+
    public:
     virtual std::string id() const = 0;
     virtual std::string version() const = 0;
     virtual std::string about() const = 0;
 
+    virtual std::vector<std::shared_ptr<user>> users() const { return _users; }
+    virtual std::vector<std::shared_ptr<group>> groups() const { return _groups; }
+
     virtual std::string packagefile(std::string ext = DEFAULT_EXTENSION) const {
         return id() + "-" + version() + "." + ext;
     }
diff --git a/libpkgupd/recipe.cc b/libpkgupd/recipe.cc
index ebf1875..e56488c 100644
--- a/libpkgupd/recipe.cc
+++ b/libpkgupd/recipe.cc
@@ -22,8 +22,8 @@ recipe::recipe(YAML::Node const &data, std::string const &file) {
 
     READ_COMMON();
 
-    READ_OBJECT_LIST(user, users);
-    READ_OBJECT_LIST(group, groups);
+    READ_OBJECT_LIST(pkginfo::user, users);
+    READ_OBJECT_LIST(pkginfo::group, groups);
 
     OPTIONAL_VALUE(bool, split, false);
 
@@ -60,19 +60,6 @@ recipe::package::flag::flag(YAML::Node const &data, std::string const &file) {
     }
 }
 
-recipe::user::user(YAML::Node const &data, std::string const &file) {
-    READ_VALUE(unsigned int, id);
-    READ_VALUE(string, name);
-    READ_VALUE(string, about);
-    READ_VALUE(string, group);
-    READ_VALUE(string, dir);
-    READ_VALUE(string, shell);
-}
-
-recipe::group::group(YAML::Node const &data, std::string const &file) {
-    READ_VALUE(unsigned int, id);
-    READ_VALUE(string, name);
-}
 
 std::string recipe::package::id() const {
     if (_id == "lib" ||
diff --git a/libpkgupd/recipe.hh b/libpkgupd/recipe.hh
index d461fee..f18298a 100644
--- a/libpkgupd/recipe.hh
+++ b/libpkgupd/recipe.hh
@@ -12,51 +12,6 @@ namespace rlxos::libpkgupd {
 
 class recipe : public std::enable_shared_from_this<recipe> {
    public:
-    class user {
-       private:
-        unsigned int _id;
-        std::string _name, _about, _dir, _shell, _group;
-
-       public:
-        user(unsigned int id,
-             std::string const &name,
-             std::string const &about,
-             std::string const &dir,
-             std::string const &shell,
-             std::string const &group)
-            : _id(id),
-              _name(name),
-              _about(about),
-              _dir(dir),
-              _shell(shell),
-              _group(group) {
-        }
-
-        user(YAML::Node const &data, std::string const &file);
-
-        bool exists() const;
-
-        bool create() const;
-    };
-
-    class group {
-       private:
-        unsigned int _id;
-        std::string _name;
-
-       public:
-        group(unsigned int id,
-              std::string const &name)
-            : _id(id),
-              _name(name) {}
-
-        group(YAML::Node const &data, std::string const &file);
-
-        bool exists() const;
-
-        bool create() const;
-    };
-
     class package : public pkginfo {
        public:
         class flag {
@@ -151,8 +106,8 @@ class recipe : public std::enable_shared_from_this<recipe> {
 
     std::vector<std::string> _environ;
 
-    std::vector<std::shared_ptr<user>> _users;
-    std::vector<std::shared_ptr<group>> _groups;
+    std::vector<std::shared_ptr<pkginfo::user>> _users;
+    std::vector<std::shared_ptr<pkginfo::group>> _groups;
 
     std::vector<std::shared_ptr<package>> _packages;
 
diff --git a/libpkgupd/sysdb.cc b/libpkgupd/sysdb.cc
index e169064..9343574 100644
--- a/libpkgupd/sysdb.cc
+++ b/libpkgupd/sysdb.cc
@@ -17,6 +17,9 @@ sysdb::package::package(YAML::Node const &data, std::string const &file) {
 
     READ_LIST(std::string, depends);
     READ_LIST(std::string, files);
+
+    READ_OBJECT_LIST(pkginfo::user, users);
+    READ_OBJECT_LIST(pkginfo::group, groups);
 }
 
 std::shared_ptr<pkginfo> sysdb::operator[](std::string const &pkgid) {
@@ -62,6 +65,21 @@ bool sysdb::remove(std::shared_ptr<pkginfo> const &pkginfo) {
     return true;
 }
 
+std::vector<std::shared_ptr<pkginfo>> sysdb::all() {
+    if (!std::filesystem::exists(_data_dir)) {
+        _error = "no packages database found";
+        return {};
+    }
+
+    std::vector<std::shared_ptr<pkginfo>> pkgs;
+    for (auto const &i : std::filesystem::directory_iterator(_data_dir)) {
+        YAML::Node data = YAML::LoadFile(i.path().string());
+        pkgs.push_back(std::make_shared<sysdb::package>(data, i.path().string()));
+    }
+
+    return pkgs;
+}
+
 bool sysdb::add(std::shared_ptr<pkginfo> const &pkginfo, std::vector<std::string> const &files, std::string root, bool toupdate) {
     try {
         if (is_installed(pkginfo) && !outdated(pkginfo) && !toupdate) {
@@ -91,6 +109,20 @@ bool sysdb::add(std::shared_ptr<pkginfo> const &pkginfo, std::vector<std::string
             fileptr << " - " << i << std::endl;
     }
 
+    if (pkginfo->users().size()) {
+        fileptr << "users: " << std::endl;
+        for (auto const &i : pkginfo->users()) {
+            i->print(fileptr);
+        }
+    }
+
+    if (pkginfo->groups().size()) {
+        fileptr << "groups: " << std::endl;
+        for (auto const &i : pkginfo->groups()) {
+            i->print(fileptr);
+        }
+    }
+
     std::time_t t = std::time(0);
     std::tm *now = std::localtime(&t);
 
diff --git a/libpkgupd/sysdb.hh b/libpkgupd/sysdb.hh
index 19d7d52..0c54599 100644
--- a/libpkgupd/sysdb.hh
+++ b/libpkgupd/sysdb.hh
@@ -41,6 +41,8 @@ class sysdb : public db {
 
     std::shared_ptr<pkginfo> operator[](std::string const &pkgid);
 
+    std::vector<std::shared_ptr<pkginfo>> all();
+
     bool is_installed(std::shared_ptr<pkginfo> const &pkginfo);
 
     bool outdated(std::shared_ptr<pkginfo> const &pkginfo);
diff --git a/libpkgupd/triggerer.cc b/libpkgupd/triggerer.cc
index 7c4720d..1c684ac 100644
--- a/libpkgupd/triggerer.cc
+++ b/libpkgupd/triggerer.cc
@@ -202,6 +202,28 @@ std::vector<triggerer::type> triggerer::_get(std::vector<std::vector<std::string
     return requiredTriggers;
 }
 
+bool triggerer::trigger(std::vector<std::shared_ptr<pkginfo>> const &pkgs) {
+    bool status = true;
+    for (auto const &i : pkgs) {
+        for (auto const &grp : i->groups()) {
+            PROCESS("creating group " + grp->name());
+            if (!grp->create()) {
+                ERROR("failed to create " + grp->name() + " group");
+                status = false;
+            }
+        }
+        for (auto const &usr : i->users()) {
+            PROCESS("creating user " + usr->name());
+            if (!usr->create()) {
+                ERROR("failed to create " + usr->name() + " user");
+                status = false;
+            }
+        }
+    }
+
+    return status;
+}
+
 bool triggerer::trigger(std::vector<std::vector<std::string>> const &fileslist) {
     if (fileslist.size() == 0)
         return true;
diff --git a/libpkgupd/triggerer.hh b/libpkgupd/triggerer.hh
index 49b8207..97771dc 100644
--- a/libpkgupd/triggerer.hh
+++ b/libpkgupd/triggerer.hh
@@ -2,6 +2,7 @@
 #define _PKGUPD_TRIGGERER_HH_
 
 #include "defines.hh"
+#include "pkginfo.hh"
 
 namespace rlxos::libpkgupd {
 class triggerer : public object {
@@ -36,6 +37,8 @@ class triggerer : public object {
     triggerer() {
     }
     bool trigger(std::vector<std::vector<std::string>> const &fileslist);
+
+    bool trigger(std::vector<std::shared_ptr<pkginfo>> const &pkgs);
 };
 }  // namespace rlxos::libpkgupd
 
diff --git a/pkgupd/PKGUPD.cc b/pkgupd/PKGUPD.cc
index e20d1ca..05b94e2 100644
--- a/pkgupd/PKGUPD.cc
+++ b/pkgupd/PKGUPD.cc
@@ -34,6 +34,7 @@ void PKGUPD::_print_help(char const *path) {
             "  co,  compile                 try to compile specified package(s) from repository recipe files\n"
             "  deptest                      perform dependencies test for specified package\n"
             "  info                         print information of specified package\n"
+            "  trigger                      execute require triggers and create required users & groups\n"
             "\n"
             "To override default values simply pass argument as VALUE_NAME=VALUE\n"
             "Avaliable Values:\n"
@@ -86,6 +87,12 @@ void PKGUPD::_parse_args(int ac, char **av) {
                 : _task = task::INVLAID;
             break;
 
+        case 't':
+            !(strcmp(av[1], "trigger"))
+                ? _task = task::TRIGGERS
+                : _task = task::INVLAID;
+            break;
+
         default:
             _task = task::INVLAID;
     }
@@ -364,6 +371,44 @@ int PKGUPD::exec(int ac, char **av) {
 
             return 0;
         } break;
+
+        case task::TRIGGERS: {
+            _need_args(0);
+            std::vector<std::shared_ptr<pkginfo>> pkgs;
+
+            pkgs = sysdb_.all();
+            if (pkgs.size() == 0 && sysdb_.error().length() != 0) {
+                ERROR(sysdb_.error());
+                return 2;
+            }
+
+            std::vector<std::vector<std::string>> files;
+            auto triggerer_ = triggerer();
+
+            for (auto const &i : pkgs) {
+                std::shared_ptr<sysdb::package> pkg = std::dynamic_pointer_cast<sysdb::package>(i);
+                files.push_back(pkg->files());
+            }
+
+            int status = 0;
+
+            PROCESS("executing triggers");
+            if (!triggerer_.trigger(files)) {
+                ERROR(triggerer_.error());
+                status = 2;
+            }
+
+            PROCESS("creating users and groups");
+            if (!triggerer_.trigger(pkgs)) {
+                ERROR(triggerer_.error());
+                status = 2;
+            }
+
+            return status;
+        } break;
+
+        default:
+            ERROR("invalid task");
     }
 
     return 2;
diff --git a/pkgupd/PKGUPD.hh b/pkgupd/PKGUPD.hh
index e610823..78c6f2b 100644
--- a/pkgupd/PKGUPD.hh
+++ b/pkgupd/PKGUPD.hh
@@ -21,7 +21,8 @@ class PKGUPD {
         REFRESH,
         UPDATE,
         DEPTEST,
-        INFO
+        INFO,
+        TRIGGERS,
     };
 
     enum class flag : int {
-- 
2.30.2

